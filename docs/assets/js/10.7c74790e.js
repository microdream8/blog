(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{158:function(t,a,s){t.exports=s.p+"assets/img/yuanxinglian.e8aad48d.jpeg"},279:function(t,a,s){"use strict";s.r(a);var n=s(28),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"框架相关知识点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#框架相关知识点"}},[t._v("#")]),t._v(" 框架相关知识点")]),t._v(" "),n("h2",{attrs:{id:"虚拟dom的概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom的概念"}},[t._v("#")]),t._v(" 虚拟dom的概念")]),t._v(" "),n("h3",{attrs:{id:"dom本质"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dom本质"}},[t._v("#")]),t._v(" dom本质")]),t._v(" "),n("p",[t._v("浏览器的概念，用js对象来表示页面上的元素，并提供了操作dom对象的API")]),t._v(" "),n("h3",{attrs:{id:"dom树的概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dom树的概念"}},[t._v("#")]),t._v(" DOM树的概念")]),t._v(" "),n("p",[t._v("一个网页的呈现过程："),n("br"),t._v("\n1、浏览器请求服务器获取页面HTML代码"),n("br"),t._v("\n2、浏览器在内存中，解析dom结构，并在浏览器内存中渲染出一颗dom树。"),n("br"),t._v("\n3、浏览器把dom树，呈现在页面上。"),n("br")]),t._v(" "),n("h3",{attrs:{id:"虚拟dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom"}},[t._v("#")]),t._v(" 虚拟dom")]),t._v(" "),n("p",[t._v("指的是用js对象的形式，来模拟页面上Dom嵌套关系。（以js对象的形式存在的）"),n("br"),t._v("\n例如：")]),t._v(" "),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("title")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\nccccc \n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("dhhhh"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("文本也属于子节点"),n("br"),t._v("\n模拟dom为："),n("br")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" div "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  tagName"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrs"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    id"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v(" ，\n    title"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v("   \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nchildrens"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ccccc'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      tagName"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'p'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      attrs"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      childrens"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dhhhh'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"dom和虚拟dom的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dom和虚拟dom的区别"}},[t._v("#")]),t._v(" dom和虚拟dom的区别")]),t._v(" "),n("p",[t._v("dom：浏览器中提供的概念，用JS对象表示页面上的元素，并提供了操作元素的api。"),n("br"),t._v("\n虚拟dom：框架中的概念，是开发框架的程序猿手动用js对象来模拟dom元素和嵌套关系。"),n("br"),t._v("\n本质： 用就是对象来模拟dom元素和嵌套关系"),n("br"),t._v("\n目的： 实现页面元素的高效更新。"),n("br")]),t._v(" "),n("h3",{attrs:{id:"diff算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#diff算法"}},[t._v("#")]),t._v(" Diff算法")]),t._v(" "),n("p",[t._v("tree diff:新旧两棵dom树，dom层逐级对比完毕，则所有需要被按需更新的元素，必然能够找到。"),n("br"),t._v("\ncomponent diff:在进行tree diff的时候，每一层中组件级别的对比，叫做component diff,"),n("br"),t._v("\n如果对比前后组件类型相同，则暂时认为此组件不需要被更新；"),n("br"),t._v("\n如果对比前后组件类型不同，则需要移除旧组件，创建新组件，并追加到页面上。"),n("br"),t._v("\nelement diff 在进行组件对比的时候，如果两个组件类型相同，则需要进行元素级别的对比。"),n("br"),t._v(" "),n("br"),t._v("\n详细参考："),n("br"),t._v("\nhttps://www.jianshu.com/p/5a5d3195b70c"),n("br")]),t._v(" "),n("h2",{attrs:{id:"vue中使用v-for时为什么不能用index作为key"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue中使用v-for时为什么不能用index作为key"}},[t._v("#")]),t._v(" vue中使用v-for时为什么不能用index作为key")]),t._v(" "),n("p",[t._v("结论："),n("br"),t._v("\n更新DOM的时候会出现性能问题"),n("br"),t._v("\n会发生一些状态bug"),n("br"),t._v("\nReact 中的 key 也是如此"),n("br"),n("br"),t._v(" "),n("b",[t._v("为什么要用key？")]),n("br"),t._v("\nVue 和 React 都实现了一套虚拟DOM，使我们可以不直接操作DOM元素，只操作数据便可以重新渲染页面。而隐藏在背后的原理便是其高效的Diff算法。"),n("br"),t._v("\nVue 和 React 的虚拟DOM的Diff算法大致相同，其核心是基于两个简单的假设："),n("br")]),t._v(" "),n("ol",[n("li",[t._v("两个相同的组件产生类似的DOM结构，不同的组件产生不同的DOM结构。"),n("br")]),t._v(" "),n("li",[t._v("同一层级的一组节点，他们可以通过唯一的id进行区分。"),n("br"),t._v("\n基于以上这两点假设，使得虚拟DOM的Diff算法的复杂度从O(n^3)降到了O(n)。"),n("br"),n("br")])]),t._v(" "),n("p",[t._v("当页面的数据发生变化时，Diff算法只会比较同一层级的节点："),n("br"),t._v("\n如果节点类型不同，直接干掉前面的节点，再创建并插入新的节点。"),n("br"),t._v("\n如果节点类型相同，则会重新设置该节点的属性，从而实现节点的更新。"),n("br"),t._v("\n总而言之，key的作用主要是为了高效的更新虚拟DOM 。另外vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了让vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果。"),n("br")]),t._v(" "),n("p",[t._v("参考来源：https://blog.csdn.net/aihuanhuan110/article/details/98223011"),n("br")]),t._v(" "),n("h2",{attrs:{id:"单页应用与多页应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单页应用与多页应用"}},[t._v("#")]),t._v(" 单页应用与多页应用")]),t._v(" "),n("p",[t._v("单页应用：一个项目中只有一个完整的html页面，其他的都是部分的html片段组成。页面跳转只是局部刷新，不会重新加载全部资源。片段之间的切换快，比较容易实现转场动画。"),n("br"),t._v(" "),n("img",{staticStyle:{width:"80%"},attrs:{src:s(158)}}),n("br")]),t._v(" "),n("h2",{attrs:{id:"前端路由hash、history原理及简单的实践下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前端路由hash、history原理及简单的实践下"}},[t._v("#")]),t._v(" 前端路由hash、history原理及简单的实践下")]),t._v(" "),n("p",[t._v("路由是根据不同的url地址来显示不同的页面或内容的功能，这个概念很早是由后端提出的。"),n("br"),t._v("\n那么既然有后端路由，那为什么还需要我们前端路由呢？后端路由有一个很大的缺点就是每次路由切换的时候都需要去刷新页面，然后发出ajax请求，然后将请求数据返回回来，那么这样每次路由切换都要刷新页面对于用户体验来说就不好了。因此为了提升用户体验，我们前端路由就这样产生了。它就可以解决浏览器不会重新刷新了。"),n("br")]),t._v(" "),n("h3",{attrs:{id:"hash模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hash模式"}},[t._v("#")]),t._v(" hash模式")]),t._v(" "),n("p",[t._v("hash路由模式是这样的：http://xxx.abc.com/#/xx。 有带#号，后面就是hash值的变化。改变后面的hash值，它不会向服务器发出请求，因此也就不会刷新页面。并且每次hash值发生改变的时候，会触发hashchange事件。因此我们可以通过监听该事件，来知道hash值发生了哪些变化。比如我们可以如下简单的监听："),n("br")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashAndUpdate")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// todo 匹配 hash 做 dom 更新操作")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nwindow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hashchange'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hashAndUpdate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"history模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#history模式"}},[t._v("#")]),t._v(" history模式")]),t._v(" "),n("p",[t._v("HTML5的History API为浏览器的全局history对象增加了该扩展方法。它是一个浏览器的一个接口，在window对象中提供了onpopstate事件来监听历史栈的改变，只要历史栈有信息发生改变的话，就会触发该事件。提供了如下事件："),n("br")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'popstate'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("参考来源：https://www.cnblogs.com/tugenhua0707/p/10859214.html"),n("br")]),t._v(" "),n("h2",{attrs:{id:"多个组件之间如何拆分各自的state，每块小的组件有自己的状态，它们之间还有一些公共的状态需要维护，如何思考这块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多个组件之间如何拆分各自的state，每块小的组件有自己的状态，它们之间还有一些公共的状态需要维护，如何思考这块"}},[t._v("#")]),t._v(" 多个组件之间如何拆分各自的state，每块小的组件有自己的状态，它们之间还有一些公共的状态需要维护，如何思考这块")]),t._v(" "),n("p",[t._v("状态提升，找到容器组件和展示组件，保证唯一数据源和单向数据"),n("br"),t._v("\n对于组件的拆分还要做到高内聚低耦合"),n("br")]),t._v(" "),n("h2",{attrs:{id:"数组对象更新"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组对象更新"}},[t._v("#")]),t._v(" 数组对象更新")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("Vue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'description'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" finalStr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// （arr/obj, name, newvalue) 数组或对象可以具体到某一项")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);