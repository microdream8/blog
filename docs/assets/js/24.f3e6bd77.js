(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{292:function(n,e,s){"use strict";s.r(e);var a={name:"App",data:function(){return{msg:"diyVue"}}},p=s(38),t=Object(p.a)(a,function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"基于webpack从0配置vue开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于webpack从0配置vue开发","aria-hidden":"true"}},[n._v("#")]),n._v(" 基于webpack从0配置vue开发")]),n._v(" "),s("p",[n._v("vue 官方为了让开发者快速进行开发，为了很大的精力，提供了vue-cli脚手架，只需简单几步，就能开始vue的开发了。")]),n._v(" "),s("p",[n._v("然而，对项目里的webpack封装和配置了解的不清楚，就容易导致出问题不知如何解决，甚至不会通过webpack去扩展新功能，对webpack+vue项目究竟是怎样搭建起来的感到一脸懵逼。")]),n._v(" "),s("p",[n._v("本文就是要解决这个问题。")]),n._v(" "),s("h2",{attrs:{id:"初始化项目："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化项目：","aria-hidden":"true"}},[n._v("#")]),n._v(" 初始化项目：")]),n._v(" "),s("p",[n._v("在你想生成文件的目录下，打开命令行执行 npm init 然后一路回车就行了，主要是生成一些项目基本信息。最后会生成一个 package.json 文件")]),n._v(" "),s("p",[n._v("二、安装webpack及脚手架\nnpm install webpack -D\nnpm install -D webpack-cli\n1\n2\n三、ES6+转码为ES5及适思考配浏览器:\n配置 ES6/7/8 转 ES5代码\n安装相关依赖")]),n._v(" "),s("p",[n._v("npm install babel-loader @babel/core @babel/preset-env -D\n1\n根目录下新建一个src文件夹，然后再建一个main.js文件,写2句代码")]),n._v(" "),s("p",[n._v("// src/main.js\nlet i = 4.0;\nconsole.log('hello webpack'+ i);\n1\n2\n3\nwebpack.config.js文件\n在项目根目录下增加webpack.config.js文件，然后写入下面这份简单的配置：")]),n._v(" "),s("p",[n._v("module.exports = {\nmode: 'development',// 指定开发者打包模式\nentry : './src/main.js',//入口文件\noutput : {//输出文件\nfilename : 'index.js',//输出文件名\npath :  __dirname+'/public'//输出文件路径\n},\nmodule : {\nrules: [\n{/"),s("em",[n._v("将js或者jsx文件转码成es5")]),n._v("/\ntest: /.jsx?$/,// 正则惰性匹配后缀名为js或者jsx的文件\nexclude: /node_modules/,//排除这个文件夹\nuse: {\nloader: 'babel-loader',\noptions: {\npresets: ['@babel/preset-env']\n}\n}\n},\n]\n},\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n然后在package.json的scripts先添加下面这个指令：")]),n._v(" "),s("p",[n._v('"build": "webpack --config ./webpack.config.js",\n1\n最后运行:')]),n._v(" "),s("p",[n._v("npm run build\n1\n可以看到根目录会生成一个public文件夹，而且下面有一个由src/main.js打包出来的index.js\n思考：\nbabel-loader可以将ES6代码转为ES5代码，从而可以在现有环境执行，所以我们可以用ES6编写，而不用考虑环境支持的问题；有些浏览器版本的发布早于ES6的定稿和发布，因此如果在编程中使用了ES6的新特性，而浏览器没有更新版本，或者新版本中没有对ES6的特性进行兼容，那么浏览器就会无法识别ES6代码，例如IE9根本看不懂代码写的let和const是什么东西？只能选择报错，这就是浏览器对ES6的兼容性问题；我们可以通过 babel-polyfill 对一些不支持新语法、兼容性差的客户端提供新语法的实现。")]),n._v(" "),s("p",[n._v("这个思考由你来完成吧，如果你不想加入可以跳过，不影响后面的操作")]),n._v(" "),s("p",[n._v("四、使用 html-webpack-plugin来创建html页面\n1.安装html-webpack-plugin插件")]),n._v(" "),s("p",[n._v("npm install html-webpack-plugin -D\n1\n2.添加入口文件\n在根目录下增加index.html文件，添加下面代码：")]),n._v("\n<!DOCTYPE html>\n"),s("html",{attrs:{lang:"en"}},[s("head",[s("meta",{attrs:{charset:"UTF-8"}}),n._v(" "),s("meta",{attrs:{name:"viewport",content:"width=device-width, initial-scale=1.0"}}),n._v(" "),s("meta",{attrs:{"http-equiv":"X-UA-Compatible",content:"ie=edge"}}),n._v(" "),s("title",[n._v("hellow diyVue")])]),n._v(" "),s("body",[s("div",{attrs:{id:"app"}}),n._v(" "),s("script",{attrs:{type:"text/javascript",src:"index.js"}})])]),n._v("\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n3.修改webpack.config.js配置\n"),s("p",[n._v("const path = require('path');\nconst HtmlWebpackplugin = require('html-webpack-plugin');\nmodule.exports = {\nmode: 'development',// 指定开发者打包模式\nentry : './src/main.js',//入口文件\noutput : {//输出文件\nfilename : 'index.js',//输出文件名\npath :  __dirname+'/public'//输出文件路径\n},\nmodule : {\nrules: [\n{/"),s("em",[n._v("将js或者jsx文件转码成es5")]),n._v("/\ntest: /.jsx?$/,// 正则惰性匹配后缀名为js或者jsx的文件\nexclude: /node_modules/,//排除这个文件夹\nuse: {\nloader: 'babel-loader',\noptions: {\npresets: ['@babel/preset-env']\n}\n}\n},\n]\n},\nplugins:[\nnew HtmlWebpackplugin({\nfilename: 'index.html', // 打包后的文件名，默认是index.html\ntemplate: path.resolve(__dirname, 'index.html') // 导入被打包的文件模板\n})\n]\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n4.查看效果\n运行npm run build ，我们可以看到public文件夹下有一个index.html生成了，而且还引入了src/main.js的压缩包index.js")]),n._v(" "),s("p",[n._v("五、安装配置并使用vue\n1.安装插件及vue")]),n._v(" "),s("p",[n._v("npm install vue-loader vue-template-compiler cache-loader thread-loader -D\nnpm install vue -S\n1\n2\nvue-loader 用于解析.vue文件\nvue-template-compiler 用于编译模板\ncache-loader 用于缓存loader编译的结果\nthread-loader 使用 worker 池来运行loader，每个 worker 都是一个 node.js 进程。\n2.修改webpack.config.js配置")]),n._v(" "),s("p",[n._v("const path = require('path');\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\nconst HtmlWebpackplugin = require('html-webpack-plugin');\nmodule.exports = {\nmode: 'development',// 指定开发者打包模式\nentry : './src/main.js',//入口文件\noutput : {//输出文件\nfilename : 'index.js',//输出文件名\npath :  __dirname+'/public'//输出文件路径\n},\nmodule : {\nrules: [\n{/"),s("em",[n._v("将js或者jsx文件转码成es5")]),n._v("/\ntest: /.jsx?$/,// 正则惰性匹配后缀名为js或者jsx的文件\nexclude: /node_modules/,//排除这个文件夹\nuse: {\nloader: 'babel-loader',\noptions: {\npresets: ['@babel/preset-env']\n}\n}\n},\n{\ntest: /.vue$/,\nuse: [\n{\nloader: 'cache-loader'\n},\n{\nloader: 'thread-loader'\n},\n{\nloader: 'vue-loader',\noptions: {\ncompilerOptions: {\npreserveWhitespace: false\n},\n}\n}\n]\n},\n]\n},\nplugins:[\nnew HtmlWebpackplugin({\nfilename: 'index.html', // 打包后的文件名，默认是index.html\ntemplate: path.resolve(__dirname, 'index.html') // 导入被打包的文件模板\n}),\nnew VueLoaderPlugin()\n]\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n3.使用vue\n在 src 新建一个 App.vue：")]),n._v(" "),[s("div",{staticClass:"App"},[n._v("\n    Hello "+n._s(n.msg)+"\n  ")])],n._v(" "),s("p",[n._v("1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n修改src/main.js的代码：")]),n._v(" "),s("p",[n._v("import Vue from 'vue'\nimport App from './App.vue'")]),n._v(" "),s("p",[n._v("new Vue({\nrender: h => h(App)\n}).$mount('#app')\n1\n2\n3\n4\n5\n6\n4.打包及运行vue\n再次运行npm run build,然后在浏览器打开public/index.html，可以发现vue已经可以运行了")]),n._v(" "),s("p",[n._v("六、安装本地服务及代码热更新\n1.安装webpack-dev-server")]),n._v(" "),s("p",[n._v("npm install webpack-dev-server -D\n1\n2.修改webpack.config.js配置")]),n._v(" "),s("p",[n._v("// ...\ndevServer: { //node本地服务器\nhost: '127.0.0.1',\nport: 8010\n},\n// ...\n1\n2\n3\n4\n5\n6\n3.在package.json的scripts中增加一行启动本地服务指令：")]),n._v(" "),s("p",[n._v('"dev": "webpack-dev-server --env.dev",\n1\n4.运行以及查看效果')]),n._v(" "),s("p",[n._v("运行npm run dev")]),n._v(" "),s("p",[n._v("浏览器打开http://127.0.0.1:8010/")]),n._v(" "),s("p",[n._v("我们可以发现本地服务已经成功启动了，而且当我们修改src/app.vue的代码后，浏览器是会自动刷新的(热更新)。一个简单的vue项目我们已经搭建出来了，之后我们可以像堆积木一样添加自己想要的功能了。\n提醒:devServer生成的文件是存在我们电脑的内存中的，不在我们的硬盘上(不落盘)，可以通过查看public文件夹知道，我们改动代码后这文件夹下的内容是不会变更的。\n七、安装Vue-Router组件\n1.安装")]),n._v(" "),s("p",[n._v("npm install vue-router --save\n1\n2.创建相关文件及编写代码")]),n._v(" "),s("p",[n._v("新增视图组件在 src 目录下新增两个视图组件 src/view/page1.vue 和 src/view/page2.vue\npage1:\n"),[s("div",{staticClass:"page1"},[s("h2",[n._v("page1")])])],n._v("\n1\n2\n3\n4\n5\npage2:")],2),n._v(" "),[s("div",{staticClass:"page2"},[s("h2",[n._v("page2")])])],n._v("\n1\n2\n3\n4\n5\n在 src 目录下新增一个 router/index.js 文件\nimport Vue from 'vue'\nimport VueRouter from \"vue-router\";\nimport page1 from '../view/page1.vue';\nimport page2 from '../view/page2.vue';\nVue.use(VueRouter)\nexport default new VueRouter({\n  mode: 'hash',\n  routes: [\n    {\n      path: '/page1',\n      component: page1\n    },\n    {\n      path: '/page2',\n      component: page2\n    },\n    {\n      path: '*',\n      redirect: '/page2'\n    }\n  ]\n})\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n修改 main.js 文件\nimport Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\n"),s("p",[n._v("new Vue({\nrouter,\nrender: h => h(App)\n}).$mount('#app')\n1\n2\n3\n4\n5\n6\n7\n8\n修改 App.vue 组件")]),n._v(" "),[s("div",[s("div",{staticClass:"App"},[n._v("\n        Hello "+n._s(n.msg)+"\n    ")]),n._v(" "),s("div",[s("router-link",{attrs:{to:"/page1"}},[n._v("go page1")]),n._v(" "),s("router-link",{attrs:{to:"/page2"}},[n._v("go page2")])],1),n._v(" "),s("div",[s("router-view")],1)])],n._v(" "),s("script",[n._v("\nexport default {\n  name: 'App',\n<p>data() {\nreturn {\nmsg: &quot;diyVue&quot;,\n};\n}\n};\n")]),n._v("\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n3.运行及测试效果"),s("p"),n._v(" "),s("p",[n._v("运行npm run dev\n测试效果：")]),n._v(" "),s("p",[n._v("到此为止的文件目录是这样的：")]),n._v(" "),s("p",[n._v("八、一口气配置基础组件\n通过前面的学习，相信你已经基本掌握了堆积木的操作，为了节省时间接下我们一次性添加多几个积木\n1.安装基础组件")]),n._v(" "),s("p",[n._v("npm install sass-loader dart-sass css-loader style-loader file-loader url-loader postcss-loader autoprefixer -D\n1\nsass-loader, dart-sass主要是将 scss/sass 语法转为css\ncss-loader主要是解析 css 文件\nstyle-loader 主要是将 css 解析到html页面的style上\npostcss-loader autoprefixer实现自动添加css3前缀\n2.在webpack.config.js中增加配置\n// ...\n{\ntest: /.(scss|sass)$/,\nuse: [\n{\nloader: 'style-loader'\n},\n{\nloader: 'css-loader'\n},\n{\nloader: 'sass-loader',\noptions: {\nimplementation: require('dart-sass')\n}\n},\n{\nloader: 'postcss-loader',\noptions: {\nplugins: [\nrequire(\"autoprefixer\") /"),s("em",[n._v("自动添加前缀")]),n._v("/\n]\n}\n}\n]\n},\n{\ntest: /.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(?.+)?$/,\nuse: [{\nloader: 'url-loader',\noptions: {\nlimit: 10000\n}\n}]\n}\n// ...\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n3.运行及测试\n在src/App.vue后面加入下面样式代码：")]),n._v(" "),s("p",[n._v("// ...\n")]),s("style",{attrs:{lang:"scss",scoped:""}},[n._v("\n.App{\ncolor:red;\n}\n")]),n._v("\n1\n2\n3\n4\n5\n6\n运行后，我们可以看到样式代码生效了"),s("p"),n._v(" "),s("p",[n._v("九、自定义环境变量和常量\n通过 webpack提供的DefinePlugin插件，可以很方便的定义环境变量\n1.我们先创建一个用来以后保存常量的文件，在根目录下添加config/constant.js")]),n._v(" "),s("p",[n._v("const NODE_ENV = process.env.NODE_ENV; // webpack编译是获取node环境的配置信息\nconst config = {\nproduction: { // 生产环境(线上环境)\nDOMAIN: 'production.com', // 上线域名、地址\nFOO_API: 'production.foo.api.com', // api变量\nBAR_API: 'production.bar.api.com', // api变量\nBAZ_API: 'production.baz.api.com', // api变量\n},\ndevelopment: { // 开发环境\nDOMAIN: 'development.com', // 测试域名、地址\nFOO_API: 'development.foo.api.com', // api变量\nBAR_API: 'development.bar.api.com', // api变量\nBAZ_API: 'development.baz.api.com', // api变量\n}\n}\nmodule.exports = config[NODE_ENV];\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n2.修改webpack.config.js文件")]),n._v(" "),s("p",[n._v("const webpack = require('webpack');\nconst constant = require('./config/constant'); // 引入常量文件\n// ...\nplugins:[\n// ...\nnew webpack.DefinePlugin({ // 定义全局变量\nCONSTANT: JSON.stringify(constant)\n})\n],\n1\n2\n3\n4\n5\n6\n7\n8\n9\n3.修改package.json")]),n._v(" "),s("p",[n._v('"scripts": {\n"dev": "cross-env NODE_ENV=development webpack-dev-server",\n"build": "cross-env NODE_ENV=production webpack --config ./webpack.config.js",\n"test": "echo "Error: no test specified" && exit 1"\n},\n1\n2\n3\n4\n5\ncross-env用来磨平mac和win中的node环境之间的不同，所以我们需要安装一下\nnpm install cross-env -D\n1\nNODE_ENV=development和NODE_ENV=production指定node环境\n4.运行及调试')]),n._v(" "),s("p",[n._v("由于修改了webpack.config.js所以需要重新运行npm run dev\n在src/main.js后面加上一句测试代码：console.log(CONSTANT);\n配置成功打印出来")]),n._v(" "),s("p",[n._v("十、区分开发环境打包跟生产环境打包\n在config下新建两个文件")]),n._v(" "),s("p",[n._v("webpack.dev.js 开发环境使用\nwebpack.prod.js 生产环境使用\nwebpack.config.js 公用配置\n公共配置webpack.config.js")]),n._v(" "),s("p",[n._v("const path = require('path');\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\nconst HtmlWebpackplugin = require('html-webpack-plugin');\nconst webpack = require('webpack');\nconst constant = require('./config/constant'); // 引入常量文件\nmodule.exports = {\nentry : './src/main.js',//入口文件\noutput : {//输出文件\nfilename : 'index.js',//输出文件名\npath :  __dirname+'/public',//输出文件路径\n// publicPath: \"public\", // 虚拟目录，自动指向path编译目录，放在内存中，所以在硬盘上是找不到的 默认是：/\n},\nmodule : { // 当执行require或import命令时匹配下面的加载规则\nrules: [\n{/"),s("em",[n._v("将js或者jsx文件转码成es5")]),n._v("/\ntest: /.jsx?$/,// 正则惰性匹配后缀名为js或者jsx的文件\nexclude: /node_modules/,//排除这个文件夹\nuse: {\nloader: 'babel-loader',\noptions: {\npresets: ['@babel/preset-env']\n}\n}\n},\n{ // vue文件处理\ntest: /.vue$/,\nuse: [\n{\nloader: 'cache-loader'\n},\n{\nloader: 'thread-loader'\n},\n{\nloader: 'vue-loader',\noptions: {\ncompilerOptions: {\npreserveWhitespace: false\n},\n}\n},\n]\n},\n// { // 文件资源加载 变成base64会跟下面图片资源处理冲突所以注释了\n//     test: /.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(?.+)?$/,\n//     use: [{\n//       loader: 'url-loader',\n//       options: {\n//           name: '[name].[ext]'\n//       }\n//     }]\n// },\n{ // 图片资源处理\ntest: /.(png|jpg|gif|svg)/,\nuse: [{\nloader: \"file-loader\",\noptions: {\nname: '[name].[ext]',\noutputPath: \"public/assets/\", // 输出目录\nlimit: 8192,\n}\n}]\n}\n]\n},\nplugins:[\nnew HtmlWebpackplugin({\nfilename: 'index.html', // 打包后的文件名，默认是index.html\ntemplate: path.resolve(__dirname, 'index.html') // 导入被打包的文件模板\n}),\nnew VueLoaderPlugin(),\nnew webpack.DefinePlugin({ // 定义全局变量\nCONSTANT: JSON.stringify(constant)\n})\n],\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n开发环境")]),n._v(" "),s("p",[n._v("不需要压缩代码\n需要本地服务和热更新\ncss不需要提取到css文件\nsourceMap\nconst merge = require('webpack-merge')\nconst webpackConfig = require('../webpack.config')\nmodule.exports = merge(webpackConfig, {\ndevtool: 'cheap-module-eval-source-map',\nmode: 'development',// 指定开发者打包模式\ndevServer: { //node本地服务器\nhost: '127.0.0.1',\nport: 8010\n},\nmodule : {\nrules: [\n{\ntest: /.(scss|sass)$/,\nuse: [\n{\nloader: 'style-loader'\n},\n{\nloader: 'css-loader'\n},\n{\nloader: 'sass-loader',\noptions: {\nimplementation: require('dart-sass')\n}\n},\n{\nloader: 'postcss-loader',\noptions: {\nplugins: [\nrequire(\"autoprefixer\") /"),s("em",[n._v("自动添加前缀")]),n._v("/\n]\n}\n}\n]\n},\n]\n},\n})\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n生产环境")]),n._v(" "),s("p",[n._v("压缩代码\n不需要本地服务和热更新\n提取css，压缩css文件\nsourceMap\n构建前清除上一次构建的内容\nconst path = require('path')\nconst merge = require('webpack-merge')\nconst webpack = require('webpack')\nconst webpackConfig = require('../webpack.config')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst OptimizeCssnanoPlugin = require('@intervolga/optimize-cssnano-plugin');\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\");\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\nmodule.exports = merge(webpackConfig, {\nmode: 'production',// 指定开发者打包模式压缩js代码\ndevtool: '#source-map',\noptimization: {\nsplitChunks: {\ncacheGroups: {\nvendors: {\nname: 'chunk-vendors',\ntest: /[\\/]node_modules[\\/]/,\npriority: -10,\nchunks: 'initial'\n},\ncommon: {\nname: 'chunk-common',\nminChunks: 2,\npriority: -20,\nchunks: 'initial',\nreuseExistingChunk: true\n}\n}\n}\n},\nmodule: {\nrules: [\n{\ntest: /.(scss|sass)$/,\nuse: [\n{\nloader: MiniCssExtractPlugin.loader\n},\n{\nloader: 'css-loader',\noptions: {\nimportLoaders: 2\n}\n},\n{\nloader: 'sass-loader',\noptions: {\nimplementation: require('dart-sass')\n}\n},\n{\nloader: 'postcss-loader',\noptions: {\nplugins: [\nrequire(\"autoprefixer\") /"),s("em",[n._v("自动添加前缀")]),n._v("/\n]\n}\n}\n]\n},\n]\n},\nplugins: [\nnew MiniCssExtractPlugin({\nfilename: 'css/[name].[contenthash:8].css',\nchunkFilename: 'css/[name].[contenthash:8].css'\n}),\nnew OptimizeCssnanoPlugin({\nsourceMap: true,\ncssnanoOptions: {\npreset: [\n'default',\n{\nmergeLonghand: false,\ncssDeclarationSorter: false\n}\n]\n}\n}),\nnew CopyWebpackPlugin([\n{\nfrom: path.resolve(__dirname, '../public'),\nto: path.resolve(__dirname, '../dist')\n}\n]),\nnew CleanWebpackPlugin(), // 用于删除上次构建的文件\n]\n})\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n安装所需依赖")]),n._v(" "),s("p",[n._v("npm i @intervolga/optimize-cssnano-plugin mini-css-extract-plugin clean-webpack-plugin webpack-merge copy-webpack-plugin -D\n1\n@intervolga/optimize-cssnano-plugin 用于压缩css代码\nmini-css-extract-plugin 用于提取css到文件中\nclean-webpack-plugin 用于删除上次构建的文件\nwebpack-merge 合并 webpack配置\ncopy-webpack-plugin 用户拷贝静态资源\n图片资源路径名使用\n修改src/App.vue")]),n._v(" "),[s("div",[s("div",{staticClass:"App"},[s("img",{attrs:{src:n.imgUrl1}}),n._v(" "),s("div",[n._v("Hello "+n._s(n.msg))])]),n._v(" "),s("div",[s("router-link",{attrs:{to:"/page1"}},[n._v("go page1")]),n._v(" "),s("router-link",{attrs:{to:"/page2"}},[n._v("go page2")])],1),n._v(" "),s("div",[s("router-view")],1)])],n._v(" "),s("script",[n._v("\nexport default {\n  name: 'App',\n<p>data() {\nreturn {\nmsg: &quot;diyVue&quot;,\nimgUrl1: require('./assets/logo.png'),\n};\n}\n};\n")]),n._v(" "),s("style",{attrs:{lang:"scss",scoped:""}},[n._v("\n.App{\ncolor:red;\n}\n")]),n._v("\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n这次的操作优化了图片资源的引用，我们执行npm run dev后，在浏览器打开项目，可以看到"),s("p"),n._v(" "),s("p",[n._v("优化前这个路径是base64位的，现在变成了一个普通的路径。")]),n._v(" "),s("p",[n._v("总结：\nvue-cli是一个封装得很完美的vue脚手架，所以它的适应性很强；但是有些大公司他们的前端项目一般不会直接套用这种脚手架，而是需要结合公司内部的组件一步步搭起一个vue前端项目。\n单纯的vue架构是非常简单的，但是结合到node环境和webpack一起用的话，有一些不是太熟悉node、webpack的前端同学就会有些蒙圈。这个案例中，我们主要是搭建好了一个webpack环境，然后将需要的东西一件一件组装起来，虽然不算太完善，但是学会了这种思路的话，我们处理其他前端项目也不难了。")]),n._v(" "),s("p",[n._v("如果帮助到你了，就点赞，哈哈哈，不可能有赞的！")])],2)},[],!1,null,null,null);e.default=t.exports}}]);